/*
Service for adding two numbers
URI: /eval
VERB: POST
Body 
    Expects:JSON {"filePath":Path_of_the_file}

* @authors
 *  - Kenneth Alfaro Barboza
 *  - Luis Fuentes Fuentes
 *  - Luis Eduardo Restrepo Veintemilla
 *  - Maria Angelica Robles Azofeifa
 *  - Royer ZuÃ±iga Villareal
 * @version 1.0.0

*/
:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_json)).
:- use_module(library(http/http_log)).

:- use_module(library(http/http_cors)).

:- use_module(library(http/html_write)).

:- use_module(library(readutil)).

% URL handlers.
:- http_handler('/eval', handle_request, [method(post)]).
:- http_handler('/', home, []).

handle_request(Request) :-
    http_read_json_dict(Request, Query),
    evaluate(Query, Solution),
    reply_json_dict(Solution).

server(Port) :-
    http_server(http_dispatch, [port(Port)]).

set_setting(http:logfile, 'service_log_file.log').

%%%%%%%%%%%%%%%%%%%%%%%%%% LOGIC %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Calls evaluation.
evaluate(_{fileName:Filename}, _{status: true, answer:Code, msg:'succeed'}) :-
    read_js_file_content(Filename, JsContent), 
    write_file(Filename, JsContent),
    Code is 0 % true
.
evaluate(_, _{accepted: false, answer:0, msg:'Error: failed evaluation'}).



read_js_file_content(FileName, Content) :-
    read_file_to_string(FileName, Content, [])
.

get_date_time(Date, Time) :-
    get_time(T), stamp_date_time(T, date(Year, Month, Day, H, M, S, _, _, _), 'UTC'), 
    HourToCST is H - 6,
    SecondsWithoutDecimals is floor(S),
    atomic_list_concat([Year, '-', Month, '-', Day, ' '], '', Date),
    atomic_list_concat([HourToCST, ':', M, ':', SecondsWithoutDecimals], '', Time)
.

write_file(FileName, Content) :-
    get_date_time(Date, Time),
    atomic_list_concat(['// Generated by Prolog OFS 1.5 transpiler {', Date, Time, '}'], '', TimeStamp),

    % Check if '// Generated by Prolog OFS 1.5 transpiler {' and then find the next '}' in the file, if exists, 
    % remove it and add the new timestamp, otherwise, just add the timestamp at the start of the file.
    (   sub_string(Content, _, _, _, '// Generated by Prolog OFS 1.5 transpiler {')
    ->  sub_string(Content, Before, _, _, '}'),
        EndOfTimeStamp is Before + 2,
        sub_string(Content, 0, EndOfTimeStamp, _, _),
        sub_string(Content, EndOfTimeStamp, _, 0, ContentWithoutTimeStamp),
        atomic_list_concat([TimeStamp, ContentWithoutTimeStamp], '\n', NewContent),
        !
    ;   atomic_list_concat([TimeStamp, Content], '\n\n', NewContent)
    ),
    
    open(FileName, write, Stream),
    write(Stream, NewContent),
    close(Stream)
.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

home(_Request) :-
        reply_html_page(title('Mini Add Service'),
                        [ h1('To use it:'),
                          p([h4('Send a post messsage'),
                             h4('URI:/add'),
                             h4('body: JSON data of the form {"a":number, "b":number}'),
                             h4('Service Responds with JSON as follows:'),
                             ul([li('{accepted:true, answer:a+b}    if data ok'),
                                 li('{accepted:false, answer:0, msg:some_error_message} othwerwise')])
                            ])
                        ]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MAIN %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- initialization
    format('*** Starting Server ***~n', []),
    (current_prolog_flag(argv, [SPort | _]) -> true ; SPort='8000'),
    atom_number(SPort, Port),
    format('*** Serving on port ~d *** ~n', [Port]),
    set_setting_default(http:cors, [*]), % Allows cors for every
    server(Port).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%